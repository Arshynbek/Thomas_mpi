void YanekoMethod_mpi(double *a, double *b, double *c, double *f, double *y, int n)

{
	int size, rank, i1, i2;
	//MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	int i, j, k, kk, m = n / size;
	cout << " m: " << m << endl;
	double  *ai = new double[n + 1], *bi = new double[n + 1], *ci = new double[n + 1],   *fi = new double[n + 1];
	double  *alfa = new double[n + 1], *betta_u = new double[n + 1], *betta_w = new double[n + 1], *betta_v = new double[n + 1];
	double *u = new double[n + 1], *v = new double[n + 1], *w = new double[n + 1], *f1 = new double[n + 1], *f2 = new double[n + 1], *f3 = new double[n + 1];
	double *a_u = new double[m], *a_v = new double[m], *a_w = new double[m], *y_rez = new double[m];
	double *alfa2 = new double[size], *betta2 = new double[size];
	double *A = new double[size + 1], *B = new double[size + 1], *C = new double[size + 1], *D = new double[size + 1], *Z = new double[size + 1];

	if (rank == 0)
	{

		for (i = 0;i < n;i++)
		{

	        ai[i] = a[i];
			ci[i] = c[i];
			bi[i] = b[i];
			fi[i] = f[i];
			f3[i] = f[i];
		}
		for (i = 0;i <= n;i++)
		{
			f1[i] = 0;
			f2[i] = 0;
			
		}
		f3[n] = f3[n-1];
		fi[n] = fi[n - 1];
		ci[0] = 0;
		ci[n] = 0;
		ai[0] = 0;
		ai[n] = 0;
		bi[0] = 1;
		bi[n] = 1;
	} //end rank==0

	i1 = (n*rank) / size;
	i2 = (n*(rank + 1)) / size;

	MPI_Bcast(ai, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(bi, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(ci, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(f1, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(f2, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(f3, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(fi, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);

	f1[i1] = 1;
	f2[i2] = 1;
	f3[i1] = 0;
	f3[i2] = 0;
	b[i1] = 1;
	c[i1] = 0;
	alfa[i1] = -c[i1] / b[i1];
	betta_u[i1] = f1[i1] / b[i1];
	betta_v[i1] = f2[i1] / b[i1];
	betta_w[i1] = f3[i1] / b[i1];
	for (i = i1 + 1;i <= i2;i++)
	{

		alfa[i] = -c[i] / (b[i] + a[i] * alfa[i - 1]);
		betta_u[i] = (-a[i] * betta_u[i - 1] + f1[i]) / (b[i] + a[i] * alfa[i - 1]);
		betta_v[i] = (-a[i] * betta_v[i - 1] + f2[i]) / (b[i] + a[i] * alfa[i - 1]);
		betta_w[i] = (-a[i] * betta_w[i - 1] + f3[i]) / (b[i] + a[i] * alfa[i - 1]);
	}


	u[i1] = 1; v[i1] = 0; w[i1] = 0;
	u[i2] = 0; v[i2] = 1; w[i2] = 0;

	for (i = i2 - 1;i>i1;i--)
	{
		u[i] = (alfa[i] * u[i + 1] + betta_u[i]);
		v[i] = (alfa[i] * v[i + 1] + betta_v[i]);
		w[i] = (alfa[i] * w[i + 1] + betta_w[i]);
	}
	kk = 0;
	for (i = i1;i <= i2;i++)
	{
		a_u[kk] = u[i];
		a_v[kk] = v[i];
		a_w[kk] = w[i];
		kk++;
	}

	MPI_Gather(a_u, m, MPI_DOUBLE, u, m, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Gather(a_v, m, MPI_DOUBLE, v, m, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Gather(a_w, m, MPI_DOUBLE, w, m, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(u, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(v, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	MPI_Bcast(w, n + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);


	if (rank == 0)
	{
		B[0] = b[0] + c[0] * u[1];
		C[0] = c[0] * v[1];
		D[0] = f[0] - c[0] * w[1];
		A[size] = a[size*m] * u[size*m - 1];
		B[size] = b[size*m] + a[size*m] * v[size*m - 1];
		D[size] = f[size*m] - a[size*m] * w[size*m - 1];
		for (j = 1;j<size;j++)
		{
			A[j] = a[j*m] * u[j*m - 1];
			B[j] = a[j*m] * v[j*m - 1] + b[j*m] + c[j*m] * u[j*m + 1];
			C[j] = c[j*m] * v[j*m + 1];
			D[j] = f[j*m] - a[j*m] * w[j*m - 1] - c[j*m] * w[j*m + 1];
		}

		alfa2[0] = -C[0] / B[0];
		betta2[0] = D[0] / B[0];

		for (i = 1;i<size;i++)
		{
			alfa2[i] = -C[i] / (B[i] + A[i] * alfa2[i - 1]);
			betta2[i] = (-A[i] * betta2[i - 1] + D[i]) / (B[i] + A[i] * alfa2[i - 1]);
		}
		Z[size] = (D[size] - A[size] * betta2[size - 1]) / (B[size] + A[size] * alfa2[size - 1]);
		for (j = size - 1;j >= 0;j--)
		{
			Z[j] = (alfa2[j] * Z[j + 1] + betta2[j]);
		}
	}

	MPI_Bcast(Z, size + 1, MPI_DOUBLE, 0, MPI_COMM_WORLD);
	y[i1] = Z[rank];
	y[i2] = Z[rank + 1];
	for (i = i1 + 1;i<i2;i++)
	{
		y[i] = Z[rank] * u[i] + Z[rank + 1] * v[i] + w[i];
	}

	kk = 0;
	for (i = i1;i<i2;i++)
	{
		y_rez[kk] = y[i];
		kk++;
	}
	MPI_Gather(y_rez, m, MPI_DOUBLE, y, m, MPI_DOUBLE, 0, MPI_COMM_WORLD);


	if (rank == 0)
	{
		cout << "\n Yanenko result  : \n";
		PrA(y, n);
	}

	//delete[] alfa, betta_u, betta_w, betta_v;
	//delete[] u, v, w, f1, f2, f3;
	//delete[] a_u, a_v, a_w, y_rez;
	//delete[] alfa2, betta2;
	//delete[] A, B, C, D, Z;

}  //End ThomasMethod
